---
- name: Check mandatory 'instance_name' parameter
  fail:
    msg: "'instance_name' parameter is required"
  when: instance_name is not defined

# For state=stopped or state=absent:
- name: Verify existence of instance
  stat:
    path: '/etc/systemd/system/locust-{{ instance_name }}.service'
  register: st_service
- name: Stop locust.io instance
  service:
    name: 'locust-{{ instance_name }}'
    state: stopped
  when: st_service.stat.exists and ( state == 'stopped' or state == 'absent' )

# New instances require a mode parameter
- name: Check mandatory 'mode' parameter
  fail:
    msg: "'mode' parameter must be one 'master', 'slave' or 'stand-alone'"
  when: not st_service.stat.exists and state != 'absent' and ( mode is not defined or ( mode != 'master' and mode != 'slave' and mode != 'stand-alone' ) )

# For state=absent:
- name: Verify existence base directory
  stat:
    path: '{{ base_dir }}'
  register: st
- block:
    - name: Remove locust.io instance
      file:
        path: '{{ base_dir }}/{{ instance_name }}'
        state: absent
    - name: Check whether base directory is empty
      find:
        paths: '{{ base_dir }}'
        file_type: any
      register: ent
    - name: Remove base directory, if necessary
      file:
        path: '{{ base_dir }}'
        state: absent
      when: ent.matched|int == 1 and ent.files[0].path == base_dir + '/base'
    - name: Remove systemd service file
      file:
        path: '/etc/systemd/system/locust-{{ instance_name }}.service'
        state: absent
  when: st.stat.exists and state == 'absent'

# For all other states, make sure Locust.io is installed
- block:
    - name: Add ZeroMQ repository
      yum_repository:
        baseurl: 'https://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-draft/CentOS_7/'
        gpgkey: 'http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-draft/CentOS_7/repodata/repomd.xml.key'
        enabled: true
        name: 'ZeroMQ'
        description: 'Upstream repository for ZeroMQ message queue'
        state: present
    - name: Update repo caches
      yum:
        name: python-virtualenv
        update_cache: true
    - name: Install required packages
      yum:
        name: '{{ item }}'
        state: present
      with_items:
        - zeromq-devel
        - gcc
    - name: Check directories
      file:
        path: '{{ item }}'
        state: directory
        mode: 0711
      with_items:
        - '{{ base_dir }}'
        - '{{ base_dir }}/base'
        - '{{ base_dir }}/{{ instance_name }}'
    - name: Set owner for instance directory
      file:
        path: '{{ base_dir }}/{{ instance_name }}'
        owner: '{{ run_as_user|default(omit) }}'
        group: '{{ run_as_group|default(omit) }}'
    - name: Install python requirements
      pip:
        name: 'locustio'
        virtualenv: '{{ base_dir }}/base/virtenv'
    - name: Render systemd service file
      template:
        src: locust_systemd.j2
        dest: '/etc/systemd/system/locust-{{ instance_name }}.service'
        mode: 0644
      notify:
        - reload locust systemd definitions
        - restart locust instance
      when: not st_service.stat.exists
    - name: Store run_as_user option
      lineinfile:
        path: '/etc/systemd/system/locust-{{ instance_name }}.service'
        create: false
        state: present
        regexp: '^User='
        line: "User={{ run_as_user }}"
      notify:
        - reload locust systemd definitions
        - restart locust instance
      when: run_as_user is defined
    - name: Store run_as_group option
      lineinfile:
        path: '/etc/systemd/system/locust-{{ instance_name }}.service'
        create: false
        state: present
        regexp: '^Group='
        line: "Group={{ run_as_group }}"
      notify:
        - reload locust systemd definitions
        - restart locust instance
      when: run_as_group is defined
    - name: Copy instance data
      copy:
        src: '{{ instance_data }}'
        dest: '{{ base_dir }}/{{ instance_name }}'
        owner: '{{ run_as_user|default(omit) }}'
        group: '{{ run_as_group|default(omit) }}'
      when: instance_data is defined
      notify:
        - restart locust instance
    - name: Enable or disable instance systemd service
      service:
        name: 'locust-{{ instance_name }}'
        enabled: '{{ enabled }}'
      when: enabled is defined
  when: state != 'absent'

# Store config
- name: Store config
  import_tasks: store_config.yml
  when: state != 'absent'

# For state=restarted:
- name: Restart locust.io instance
  service:
    name: 'locust-{{ instance_name }}'
    state: restarted
  when: state == 'restarted'

# For state=started
- name: Start locust.io instance
  service:
    name: 'locust-{{ instance_name }}'
    state: started
  when: state == 'started'
